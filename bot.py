import logging
import threading

from telegram import (
    Update,
    ForceReply,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    PicklePersistence,
)
from flask import Flask, request, jsonify

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
BOT_TOKEN = "8118288915:AAFetk_yAXr517sDSuG6NZ2yFi96q-ETvoU"  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
ORGANIZER_ID = 318677172  # ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞

# ID —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
PHOTO_IDS = [
    "AAMCAgADGQEBxq37Z5ud5B6CXi7slU3qf_Mzj1lvcnsAAghuAAJUTuBIigTVuYm2AzABAAdtAAM2BA",
    "AAMCAgADGQEBxq5TZ5ue3HZk18lBvi-f8PbtMKFRwzYAAiluAAJUTuBIegOfV6nETpoBAAdtAAM2BA",
    "AAMCAgADGQEBxq5oZ5ue6n7KvKI8a651oCVfjw2BEXgAAixuAAJUTuBINxAc6s1cR2oBAAdtAAM2BA",
    "AAMCAgADGQEBxq54Z5ufEvMrro6Fz5HWbr6mXqj4x1IAAjFuAAJUTuBIxFuQG_5YdKoBAAdtAAM2BA",
    "AAMCAgADGQEBxq57Z5ufGBrMKydlrY7XDlABXD4EheYAAjJuAAJUTuBIOBsc5sJj64wBAAdtAAM2BA",
    "AAMCAgADGQEBxq6KZ5ufPaicgL3RRnzbwGESoqPWz54AAjtuAAJUTuBIBOx-bjDTcrYBAAdtAAM2BA",
    "AAMCAgADGQEBxq6OZ5ufUJ2AlIaCymTFE47SzUHiusMAAkBuAAJUTuBInQHldAOFVOsBAAdtAAM2BA",
]

# --- Flask ---
app = Flask(__name__)

# --- –û–ø—Ä–æ—Å ---
async def start_poll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.chat_data["responses"] = {}
    await poll_1(update, context)

async def poll_1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question = "–¢—ã –ø—Ä–∏–¥—ë—à—å –Ω–∞ —Å–≤–∞–¥—å–±—É?"
    keyboard = ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], resize_keyboard=True)
    await update.message.reply_text(question, reply_markup=keyboard)
    context.chat_data["current_poll"] = "poll_1"

async def poll_2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question = "–ë—É–¥–µ—à—å —Å +1?"
    keyboard = ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], resize_keyboard=True)
    await update.message.reply_text(question, reply_markup=keyboard)
    context.chat_data["current_poll"] = "poll_2"

async def poll_3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question = "–û—Å—Ç–∞–µ—à—å—Å—è –ª–∏ —Å –Ω–æ—á–µ–≤–∫–æ–π?"
    keyboard = ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], resize_keyboard=True)
    await update.message.reply_text(question, reply_markup=keyboard)
    context.chat_data["current_poll"] = "poll_3"

async def poll_4(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question = "–¢–µ–±–µ –Ω—É–∂–µ–Ω —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä?"
    keyboard = ReplyKeyboardMarkup([["–î–∞, –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã", "–¢–æ–ª—å–∫–æ –Ω–∞ —Å–≤–∞–¥—å–±—É", "–¢–æ–ª—å–∫–æ —Å–æ —Å–≤–∞–¥—å–±—ã", "–ù–µ—Ç, –ø—Ä–∏–µ–¥—É –Ω–∞ –º–∞—à–∏–Ω–µ"]], resize_keyboard=True)
    await update.message.reply_text(question, reply_markup=keyboard)
    context.chat_data["current_poll"] = "poll_4"

async def poll_5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question = "–ö–∞–∫–æ–µ –º–µ–Ω—é –≤—ã–±–µ—Ä–µ—à—å?"
    keyboard = ReplyKeyboardMarkup([["–ú—è—Å–æ", "–†—ã–±–∞"]], resize_keyboard=True)
    await update.message.reply_text(question, reply_markup=keyboard)
    context.chat_data["current_poll"] = "poll_5"

async def poll_6(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question = "–í—ã–±–æ—Ä –Ω–∞–ø–∏—Ç–∫–æ–≤ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):"
    keyboard = ReplyKeyboardMarkup([["–®–∞–º–ø–∞–Ω—Å–∫–æ–µ", "–ö—Ä–∞—Å–Ω–æ–µ –≤–∏–Ω–æ", "–ë–µ–ª–æ–µ –≤–∏–Ω–æ"], ["–ú–∞—Ä—Ç–∏–Ω–∏", "–ö—Ä–µ–ø–∫–∏–π –∞–ª–∫–æ–≥–æ–ª—å", "–ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏"]], resize_keyboard=True)
    await update.message.reply_text(question, reply_markup=keyboard)
    context.chat_data["current_poll"] = "poll_6"

async def poll_7(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question = "–ö–∞–∫–∏–µ –µ—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è/–≤–æ–ø—Ä–æ—Å—ã?"
    await update.message.reply_text(question, reply_markup=ForceReply(selective=True))
    context.chat_data["current_poll"] = "poll_7"

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    message_text = update.message.text
    current_poll = context.chat_data.get("current_poll")
    responses = context.chat_data.get("responses")

    if current_poll:
        if current_poll == "poll_6":
            if current_poll not in responses:
                context.chat_data["responses"][current_poll] = [message_text]
            else:
                context.chat_data["responses"][current_poll].append(message_text)
        else:
            context.chat_data["responses"][current_poll] = message_text
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!")

        if current_poll == "poll_1":
            await poll_2(update, context)
        elif current_poll == "poll_2":
            await poll_3(update, context)
        elif current_poll == "poll_3":
            await poll_4(update, context)
        elif current_poll == "poll_4":
            await poll_5(update, context)
        elif current_poll == "poll_5":
            await poll_6(update, context)
        elif current_poll == "poll_6":
            await poll_7(update, context)
        elif current_poll == "poll_7":
            await finish_poll(update, context)

async def finish_poll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    responses = context.chat_data["responses"]
    message = "–û—Ç–≤–µ—Ç—ã –Ω–∞ –æ–ø—Ä–æ—Å:\n"
    for question, answer in responses.items():
        if isinstance(answer, list):
            message += f"{question}: {', '.join(answer)}\n"
        else:
            message += f"{question}: {answer}\n"

    await context.bot.send_message(chat_id=ORGANIZER_ID, text=message)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!\n\n–ï—Å–ª–∏ –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É ‚Äì –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ /start –∏ –ø—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ. –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–≤–∞–¥–µ–±–Ω—ã–π —á–∞—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π https://t.me/+YnMBjkthhZ1mN2Qy")

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    context.bot_data["all_users"] = context.bot_data.get("all_users", [])
    context.bot_data["all_users"].append(user_id)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ (3 + 4)
    for photo_id in PHOTO_IDS[:3]:
        await context.bot.send_photo(chat_id=user_id, photo=photo_id)

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–≤–∞–¥—å–±–µ
    info_text = (
        "üìç–õ–æ–∫–∞—Ü–∏—è: Forest Glamp https://2gis.ru/ufa/geo/70000001081557905/55.265181,55.122961 (–ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω—ã –¥–æ–º–∏–∫–∏ –¥–ª—è –Ω–æ—á–µ–≤–∫–∏üõè )\n\n"
        "üöå –¢—Ä–∞–Ω—Å—Ñ–µ—Ä - –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è 13:30, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 1 —á–∞—Å 40 –º–∏–Ω—É—Ç. –û–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –∫ 11:30\n"
        "‚è≥ –¢–∞–π–º–∏–Ω–≥ —Å–≤–∞–¥—å–±—ã - 15:30 - –§—É—Ä—à–µ—Ç, 16:00 - –°–≤–∞–¥–µ–±–Ω–∞—è —Ü–µ—Ä–µ–º–æ–Ω–∏—è, 16:40 - –ë–∞–Ω–∫–µ—Ç, 23:00 - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–æ—Ä–∂–µ—Å—Ç–≤–∞"
    )
    await update.message.reply_text(info_text)

    for photo_id in PHOTO_IDS[3:]:
        await context.bot.send_photo(chat_id=user_id, photo=photo_id)

    # –ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞
    await start_poll(update, context)

# --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
async def send_notification(context: ContextTypes.DEFAULT_TYPE, message: str):
    for user_id in context.bot_data["all_users"]:
        try:
            await context.bot.send_message(chat_id=user_id, text=message)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def notify_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id == ORGANIZER_ID:
        message = update.message.text.replace("/notify ", "")
        await send_notification(context, message)

# --- Flask –∏ –≤–µ–±—Ö—É–∫–∏ ---
application = None

def run_telegram_bot():
    global application
    persistence = PicklePersistence(filepath="bot_data")
    application = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .persistence(persistence)
        .post_init(set_webhook)
        .build()
    )
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CommandHandler("notify", notify_command))

async def set_webhook(application: Application):
    webhook_url = f"https://<–≤–∞—à –¥–æ–º–µ–Ω>.timeweb.cloud/{BOT_TOKEN}"  # –ó–∞–º–µ–Ω–∏—Ç–µ <–≤–∞—à –¥–æ–º–µ–Ω>
    await application.bot.set_webhook(webhook_url)

@app.route(f"/{BOT_TOKEN}", methods=["POST"])
async def webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    await application.process_update(update)
    return "ok"

@app.route("/")
def index():
    return "Telegram bot is running!"

if __name__ == "__main__":
    logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
    run_telegram_bot()
    app.run(host="0.0.0.0", port=5000)
