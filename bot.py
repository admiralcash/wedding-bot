import logging
from telegram import Update, ForceReply, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = "8118288915:AAFetk_yAXr517sDSuG6NZ2yFi96q-ETvoU"

# ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
ORGANIZER_ID = 318677172

# ID —Ñ–æ—Ç–æ
PHOTO_IDS = [
    "AAMCAgADGQEBxq37Z5ud5B6CXi7slU3qf_Mzj1lvcnsAAghuAAJUTuBIigTVuYm2AzABAAdtAAM2BA",
    "AAMCAgADGQEBxq5TZ5ue3HZk18lBvi-f8PbtMKFRwzYAAiluAAJUTuBIegOfV6nETpoBAAdtAAM2BA",
    "AAMCAgADGQEBxq5oZ5ue6n7KvKI8a651oCVfjw2BEXgAAixuAAJUTuBINxAc6s1cR2oBAAdtAAM2BA",
    "AAMCAgADGQEBxq54Z5ufEvMrro6Fz5HWbr6mXqj4x1IAAjFuAAJUTuBIxFuQG_5YdKoBAAdtAAM2BA",
    "AAMCAgADGQEBxq57Z5ufGBrMKydlrY7XDlABXD4EheYAAjJuAAJUTuBIOBsc5sJj64wBAAdtAAM2BA",
    "AAMCAgADGQEBxq6KZ5ufPaicgL3RRnzbwGESoqPWz54AAjtuAAJUTuBIBOx-bjDTcrYBAAdtAAM2BA",
    "AAMCAgADGQEBxq6OZ5ufUJ2AlIaCymTFE47SzUHiusMAAkBuAAJUTuBInQHldAOFVOsBAAdtAAM2BA",
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    for photo_id in PHOTO_IDS[:3]:
        await context.bot.send_photo(chat_id=user_id, photo=photo_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–∞–¥—å–±–µ
    info_text = (
        "üìç–õ–æ–∫–∞—Ü–∏—è: Forest Glamp https://2gis.ru/ufa/geo/70000001081557905/55.265181,55.122961 (–ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω—ã –¥–æ–º–∏–∫–∏ –¥–ª—è –Ω–æ—á–µ–≤–∫–∏üõè )\n\n"
        "üöå –¢—Ä–∞–Ω—Å—Ñ–µ—Ä - –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è 13:30, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 1 —á–∞—Å 40 –º–∏–Ω—É—Ç. –û–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –∫ 11:30\n"
        "‚è≥ –¢–∞–π–º–∏–Ω–≥ —Å–≤–∞–¥—å–±—ã - 15:30 - –§—É—Ä—à–µ—Ç, 16:00 - –°–≤–∞–¥–µ–±–Ω–∞—è —Ü–µ—Ä–µ–º–æ–Ω–∏—è, 16:40 - –ë–∞–Ω–∫–µ—Ç, 23:00 - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–æ—Ä–∂–µ—Å—Ç–≤–∞"
    )
    await update.message.reply_text(info_text)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ñ–æ—Ç–æ
    for photo_id in PHOTO_IDS[3:]:
        await context.bot.send_photo(chat_id=user_id, photo=photo_id)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å
    await start_poll(update, context)

async def start_poll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.chat_data["responses"] = {}
    await poll_1(update, context)

# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–ø—Ä–æ—Å–∞
async def poll_1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question = "–¢—ã –ø—Ä–∏–¥—ë—à—å –Ω–∞ —Å–≤–∞–¥—å–±—É?"
    keyboard = ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], resize_keyboard=True)
    await update.message.reply_text(question, reply_markup=keyboard)
    context.chat_data["current_poll"] = "poll_1"

async def poll_2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question = "–ë—É–¥–µ—à—å —Å +1?"
    keyboard = ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], resize_keyboard=True)
    await update.message.reply_text(question, reply_markup=keyboard)
    context.chat_data["current_poll"] = "poll_2"

async def poll_3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question = "–û—Å—Ç–∞–µ—à—å—Å—è –ª–∏ —Å –Ω–æ—á–µ–≤–∫–æ–π?"
    keyboard = ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], resize_keyboard=True)
    await update.message.reply_text(question, reply_markup=keyboard)
    context.chat_data["current_poll"] = "poll_3"

async def poll_4(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question = "–¢–µ–±–µ –Ω—É–∂–µ–Ω —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä?"
    keyboard = ReplyKeyboardMarkup([["–î–∞, –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã", "–¢–æ–ª—å–∫–æ –Ω–∞ —Å–≤–∞–¥—å–±—É", "–¢–æ–ª—å–∫–æ —Å–æ —Å–≤–∞–¥—å–±—ã", "–ù–µ—Ç, –ø—Ä–∏–µ–¥—É –Ω–∞ –º–∞—à–∏–Ω–µ"]], resize_keyboard=True)
    await update.message.reply_text(question, reply_markup=keyboard)
    context.chat_data["current_poll"] = "poll_4"

async def poll_5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question = "–ö–∞–∫–æ–µ –º–µ–Ω—é –≤—ã–±–µ—Ä–µ—à—å?"
    keyboard = ReplyKeyboardMarkup([["–ú—è—Å–æ", "–†—ã–±–∞"]], resize_keyboard=True)
    await update.message.reply_text(question, reply_markup=keyboard)
    context.chat_data["current_poll"] = "poll_5"

async def poll_6(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question = "–í—ã–±–æ—Ä –Ω–∞–ø–∏—Ç–∫–æ–≤ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):"
    keyboard = ReplyKeyboardMarkup([["–®–∞–º–ø–∞–Ω—Å–∫–æ–µ", "–ö—Ä–∞—Å–Ω–æ–µ –≤–∏–Ω–æ", "–ë–µ–ª–æ–µ –≤–∏–Ω–æ"], ["–ú–∞—Ä—Ç–∏–Ω–∏", "–ö—Ä–µ–ø–∫–∏–π –∞–ª–∫–æ–≥–æ–ª—å", "–ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏"]], resize_keyboard=True)
    await update.message.reply_text(question, reply_markup=keyboard)
    context.chat_data["current_poll"] = "poll_6"

async def poll_7(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question = "–ö–∞–∫–∏–µ –µ—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è/–≤–æ–ø—Ä–æ—Å—ã?"
    await update.message.reply_text(question, reply_markup=ForceReply(selective=True))
    context.chat_data["current_poll"] = "poll_7"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    message_text = update.message.text
    current_poll = context.chat_data.get("current_poll")
    responses = context.chat_data.get("responses")

    if current_poll:
        if current_poll == "poll_6":
            if current_poll not in responses:
                context.chat_data["responses"][current_poll] = [message_text]
            else:
                context.chat_data["responses"][current_poll].append(message_text)
        else:
            context.chat_data["responses"][current_poll] = message_text
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!")

        if current_poll == "poll_1":
            await poll_2(update, context)
        elif current_poll == "poll_2":
            await poll_3(update, context)
        elif current_poll == "poll_3":
            await poll_4(update, context)
        elif current_poll == "poll_4":
            await poll_5(update, context)
        elif current_poll == "poll_5":
            await poll_6(update, context)
        elif current_poll == "poll_6":
            await poll_7(update, context)
        elif current_poll == "poll_7":
            await finish_poll(update, context)

async def finish_poll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    responses = context.chat_data["responses"]
    message = "–û—Ç–≤–µ—Ç—ã –Ω–∞ –æ–ø—Ä–æ—Å:\n"
    for question, answer in responses.items():
        if isinstance(answer, list):  # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ poll_6 - —Å–ø–∏—Å–æ–∫
            message += f"{question}: {', '.join(answer)}\n"
        else:
            message += f"{question}: {answer}\n"

    await context.bot.send_message(chat_id=ORGANIZER_ID, text=message)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!\n\n–ï—Å–ª–∏ –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É ‚Äì –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ /start –∏ –ø—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ. –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–≤–∞–¥–µ–±–Ω—ã–π —á–∞—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π https://t.me/+YnMBjkthhZ1mN2Qy")

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–∞–¥—å–±–µ –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.")

#async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
#    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–∞–¥—å–±–µ –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    message_text = update.message.text
    current_poll = context.chat_data.get("current_poll")
    responses = context.chat_data.get("responses")

    if current_poll:
        if current_poll == "poll_6":
            if current_poll not in responses:
                context.chat_data["responses"][current_poll] = [message_text]
            else:
                context.chat_data["responses"][current_poll].append(message_text)
        else:
            context.chat_data["responses"][current_poll] = message_text
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!")

        if current_poll == "poll_1":
            await poll_2(update, context)
        elif current_poll == "poll_2":
            await poll_3(update, context)
        elif current_poll == "poll_3":
            await poll_4(update, context)
        elif current_poll == "poll_4":
            await poll_5(update, context)
        elif current_poll == "poll_5":
            await poll_6(update, context)
        elif current_poll == "poll_6":
            await poll_7(update, context)
        elif current_poll == "poll_7":
            await finish_poll(update, context)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
