import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from flask import Flask
from threading import Thread

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ---
TOKEN = "8118288915:AAFetk_yAXr517sDSuG6NZ2yFi96q-ETvoU"
ADMIN_ID = 318677172  # –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô ID (—É–∑–Ω–∞—Ç—å –º–æ–∂–Ω–æ –≤ @userinfobot)

bot = Bot(token=TOKEN)
dp = Dispatcher()

# --- –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è UptimeRobot ---
app = Flask(__name__)


@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"


def run():
    app.run(host="0.0.0.0", port=8080, debug=False)


def keep_alive():
    print("–ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä Flask...")
    server = Thread(target=run)
    server.daemon = True
    server.start()


# --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∞–≥–∏ –æ–ø—Ä–æ—Å–∞ ---
class Survey(StatesGroup):
    q1 = State()
    q2 = State()
    q3 = State()
    q4 = State()


# --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    print(f"–ë–æ—Ç –ø–æ–ª—É—á–∏–ª /start –æ—Ç {message.from_user.id}")  # –õ–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å")]], resize_keyboard=True)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–ª—É—á–∏–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–≤–∞–¥—å–±—É! üéâ –î–∞–≤–∞–π –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.",
        reply_markup=keyboard)


# --- –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞ ---
@dp.message(F.text == "–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å")
async def start_poll(message: types.Message, state: FSMContext):
    print(f"–ë–æ—Ç –ø–æ–ª—É—á–∏–ª '–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å' –æ—Ç {message.from_user.id}")  # –õ–æ–≥
    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–î–∞")],
                                             [KeyboardButton(text="–ù–µ—Ç")]],
                                   resize_keyboard=True)
    await state.set_state(Survey.q1)
    await message.answer("–¢—ã –ø—Ä–∏–¥—ë—à—å –Ω–∞ —Å–≤–∞–¥—å–±—É?", reply_markup=keyboard)


# --- –í–æ–ø—Ä–æ—Å 2: –ë—É–¥–µ—à—å —Å +1? ---
@dp.message(Survey.q1, F.text.in_(["–î–∞", "–ù–µ—Ç"]))
async def answer_q1(message: types.Message, state: FSMContext):
    await state.update_data(q1=message.text)
    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–î–∞")],
                                             [KeyboardButton(text="–ù–µ—Ç")]],
                                   resize_keyboard=True)
    await state.set_state(Survey.q2)
    await message.answer("–¢—ã –±—É–¥–µ—à—å —Å +1?", reply_markup=keyboard)


# --- –í–æ–ø—Ä–æ—Å 3: –ù—É–∂–µ–Ω –ª–∏ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä? ---
@dp.message(Survey.q2, F.text.in_(["–î–∞", "–ù–µ—Ç"]))
async def answer_q2(message: types.Message, state: FSMContext):
    await state.update_data(q2=message.text)
    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–î–∞")],
                                             [KeyboardButton(text="–ù–µ—Ç")]],
                                   resize_keyboard=True)
    await state.set_state(Survey.q3)
    await message.answer("–¢–µ–±–µ –Ω—É–∂–µ–Ω —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä?", reply_markup=keyboard)


# --- –í–æ–ø—Ä–æ—Å 4: –ö–∞–∫–æ–µ –º–µ–Ω—é –≤—ã–±–µ—Ä–µ—à—å? ---
@dp.message(Survey.q3, F.text.in_(["–î–∞", "–ù–µ—Ç"]))
async def answer_q3(message: types.Message, state: FSMContext):
    await state.update_data(q3=message.text)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ú—è—Å–Ω–æ–µ")],
                  [KeyboardButton(text="–†—ã–±–Ω–æ–µ")],
                  [KeyboardButton(text="–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ")]],
        resize_keyboard=True)
    await state.set_state(Survey.q4)
    await message.answer("–ö–∞–∫–æ–µ –º–µ–Ω—é –≤—ã–±–µ—Ä–µ—à—å?", reply_markup=keyboard)


# --- –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –∞–¥–º–∏–Ω—É ---
@dp.message(Survey.q4, F.text.in_(["–ú—è—Å–Ω–æ–µ", "–†—ã–±–Ω–æ–µ", "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ"]))
async def answer_q4(message: types.Message, state: FSMContext):
    await state.update_data(q4=message.text)
    data = await state.get_data()
    await state.clear()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ—Ç–≤–µ—Ç–∞–º–∏
    result_text = (
        f"üìù –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {message.from_user.full_name} (@{message.from_user.username}):\n"
        f"1Ô∏è‚É£ –ü—Ä–∏–¥—ë—Ç –Ω–∞ —Å–≤–∞–¥—å–±—É: {data['q1']}\n"
        f"2Ô∏è‚É£ –° +1: {data['q2']}\n"
        f"3Ô∏è‚É£ –ù—É–∂–µ–Ω —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä: {data['q3']}\n"
        f"4Ô∏è‚É£ –ú–µ–Ω—é: {data['q4']}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer("–°–ø–∞—Å–∏–±–æ! –û—Ç–≤–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É. üéâ")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É
    await bot.send_message(ADMIN_ID, result_text)


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def start_bot():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    while True:
        try:
            await dp.start_polling(bot)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ polling: {e}")
            await asyncio.sleep(5)  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥


if __name__ == "__main__":
    keep_alive()  # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–¥ –±–æ—Ç–æ–º
    asyncio.run(start_bot())
